const handleData = (data) => {
  const [rawValue, time] = data
  if (outputDeviceId && availableOutputs.length > 0) {
    if (mode == 'NOTE_ON') {
      let midiValue = Math.floor(parseFloat(rawValue) * parseInt(modeRange)) + (parseInt(note) - (Math.floor(parseInt(modeRange) / 2)))
      let clampedMidiValue = Math.min(Math.max(midiValue, 0), 127);
      sendNote(clampedMidiValue, time)
    } else if (mode == 'CC') {
      let midiValue = Math.floor(parseFloat(rawValue) * parseInt(modeRange)) + (63 - (Math.floor(parseInt(modeRange) / 2)))
      let clampedMidiValue = Math.min(Math.max(midiValue, 0), 127);
      sendCC(clampedMidiValue)
    }
  }
}


const sendNote = (note, time) => {
  const midi = availableOutputs.filter(({id}) => id == outputDeviceId)[0]
  // msg = [command, pitch, velocity]. using bitwise OR to add channel
  const msgOn = [0x90 | outputChannel, note, 127]
  const msgOff = [0x80 | outputChannel, note, 64]
  // derive note duration from current tempo. in millisecs.
  const duration = Math.floor(1000 / (tempo / 60))
  midi.send(msgOn)
  midi.send(msgOff, window.performance.now() + duration)
}


const sendCC = (value) => {
  const midi = availableOutputs.filter(({id}) => id == outputDeviceId)[0]
  midi.send([0xB0 | outputChannel, ccParameter, value ])
}



const handleResetNotes = () => {
  const midi = availableOutputs.filter(({id}) => id == outputDeviceId)[0]
  midi.send([0xB0 | outputChannel, 123, 127 ])
}

